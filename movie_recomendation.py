# -*- coding: utf-8 -*-
"""Movie_Recomendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/salsabilar311/Movie-Recommendation-System/blob/main/Movie_Recomendation.ipynb
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

df = pd.read_csv('https://raw.githubusercontent.com/salsabilar311/Movie-Recommendation-System/main/imdb_top_1000.csv?token=GHSAT0AAAAAACNPNJMQDHMTNM5NJFV2FAHAZOARZVQ')
df

"""**Data Understanding**
- Dataset yang dimiliki pada proyek ini memiliki 16 fitur
- Memiliki 1000 sampel
- Dataset memiliki 13 fitur bertipe object
- Dataset memiliki 2 fitur bertipe float64
- Dataset memiliki 1 fitur bertipe int64
"""

df.info()

"""**Univariate Exploratory Data Analysis**"""

print('Jenis Certificate: ', df.Certificate.unique())
print('Jenis Genre: ', df.Genre.unique())

"""**Data Preparation**

**Remove Missing Value**
"""

df = df.dropna()

"""**Remove Duplicates**"""

df = df.drop_duplicates()

"""**Delete unnecessary columns**"""

df.drop(['Poster_Link','Overview', 'Gross', 'Released_Year', 'Runtime', 'Meta_score', 'No_of_Votes', 'Certificate'], axis=1, inplace=True)

"""**Model Development dengan Content Based Filtering**

**One-hot Encoding**
"""

df_1 = df['Genre'].str.get_dummies(', ')

"""**Columns in df_1**"""

df_1.columns

"""**Change df_1 to array**"""

tfidf_matrix = df_1.values
tfidf_matrix

"""**Set index for df_1**"""

df_1.index = df.Series_Title
df_1

"""**Calculate cosine similarity**"""

from sklearn.metrics.pairwise import cosine_similarity

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama film
cosine_sim_df = pd.DataFrame(cosine_sim, index=df['Series_Title'], columns=df['Series_Title'])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix pada setiap film
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""**Recommendation function**"""

def movie_recommendations(nama_film, similarity_data=cosine_sim_df, items=df[['Series_Title', 'Genre']], k=5):
    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,nama_film].to_numpy().argpartition(
        range(-1, -k, -1))

    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Drop nama_film agar nama film yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(nama_film, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

df[df.Series_Title.eq('Titanic')]

"""**Input Recomendations**"""

film = str(input('Masukkan Film : '))
print()
movie_recommendations(film)